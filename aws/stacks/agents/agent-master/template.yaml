AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Bedrock Agent - AgentMaster

Parameters:
  FoundationModel:
    Type: String
    Default: anthropic.claude-3-sonnet-20240229-v1:0
    Description: Foundation model ID for the Bedrock Agent
    AllowedValues:
      - anthropic.claude-v2
      - anthropic.claude-v2:1
      - anthropic.claude-3-sonnet-20240229-v1:0
      - anthropic.claude-3-haiku-20240307-v1:0
      - anthropic.claude-instant-v1
  
  AgentInstruction:
    Type: String
    Description: Instructions for the Bedrock Agent (loaded from instruction.txt)
  
  ToolRollDiceLambdaArn:
    Type: String
    Description: ARN of the ToolRollDice Lambda function
    Default: ""

Resources:
  # IAM Role for Bedrock Agent
  AgentMasterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AgentMasterRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Principal:
              Service: bedrock.amazonaws.com
            Action: sts:AssumeRole
            Condition:
              StringEquals:
                aws:SourceAccount: !Ref AWS::AccountId
              ArnLike:
                aws:SourceArn: !Sub arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      Policies:
        - PolicyName: BedrockAgentPolicy
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Effect: Allow
                Action:
                  - bedrock:InvokeModel
                  - bedrock:InvokeModelWithResponseStream
                Resource: !Sub arn:aws:bedrock:${AWS::Region}::foundation-model/*
              - Effect: Allow
                Action:
                  - logs:CreateLogGroup
                  - logs:CreateLogStream
                  - logs:PutLogEvents
                Resource: !Sub arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/bedrock/agents/*
              - Effect: Allow
                Action:
                  - lambda:InvokeFunction
                Resource: !Ref ToolRollDiceLambdaArn

  # Bedrock Agent
  AgentMaster:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: AgentMaster
      AgentResourceRoleArn: !GetAtt AgentMasterRole.Arn
      Description: Master AI Agent powered by AWS Bedrock
      FoundationModel: !Ref FoundationModel
      Instruction: !Ref AgentInstruction
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true

  # Action Group for Dice Rolling Tool
  GameToolsActionGroup:
    Type: AWS::Bedrock::AgentActionGroup
    Properties:
      ActionGroupName: GameTools
      AgentId: !Ref AgentMaster
      AgentVersion: DRAFT
      Description: Action group for game tools like dice rolling
      ActionGroupExecutor:
        Lambda: !Ref ToolRollDiceLambdaArn
      ApiSchema:
        Payload: |
          {
            "openapi": "3.0.0",
            "info": {
              "title": "Game Tools API",
              "version": "1.0.0",
              "description": "API for game tools including dice rolling"
            },
            "paths": {
              "/rollDice": {
                "post": {
                  "summary": "Roll dice",
                  "description": "Roll one or more dice with specified number of sides",
                  "operationId": "rollDice",
                  "requestBody": {
                    "required": true,
                    "content": {
                      "application/json": {
                        "schema": {
                          "type": "object",
                          "properties": {
                            "sides": {
                              "type": "integer",
                              "description": "Number of sides on each die (e.g., 6 for d6, 20 for d20)",
                              "minimum": 1
                            },
                            "count": {
                              "type": "integer",
                              "description": "Number of dice to roll",
                              "minimum": 1,
                              "default": 1
                            }
                          },
                          "required": ["sides"]
                        }
                      }
                    }
                  },
                  "responses": {
                    "200": {
                      "description": "Successful dice roll",
                      "content": {
                        "application/json": {
                          "schema": {
                            "type": "object",
                            "properties": {
                              "sides": {
                                "type": "integer",
                                "description": "Number of sides on each die"
                              },
                              "count": {
                                "type": "integer",
                                "description": "Number of dice rolled"
                              },
                              "results": {
                                "type": "array",
                                "items": {
                                  "type": "integer"
                                },
                                "description": "Array of individual dice roll results"
                              },
                              "total": {
                                "type": "integer",
                                "description": "Sum of all dice rolls"
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }

  # Agent Alias for the latest version
  AgentMasterAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentAliasName: prod
      AgentId: !Ref AgentMaster
      Description: Production alias for AgentMaster

Outputs:
  AgentId:
    Description: The ID of the Bedrock Agent
    Value: !Ref AgentMaster
    Export:
      Name: !Sub ${AWS::StackName}-AgentId
  
  AgentArn:
    Description: The ARN of the Bedrock Agent
    Value: !GetAtt AgentMaster.AgentArn
    Export:
      Name: !Sub ${AWS::StackName}-AgentArn
  
  AgentAliasId:
    Description: The ID of the Agent Alias
    Value: !GetAtt AgentMasterAlias.AgentAliasId
    Export:
      Name: !Sub ${AWS::StackName}-AgentAliasId
  
  AgentAliasArn:
    Description: The ARN of the Agent Alias
    Value: !GetAtt AgentMasterAlias.AgentAliasArn
    Export:
      Name: !Sub ${AWS::StackName}-AgentAliasArn
  
  AgentRoleArn:
    Description: The ARN of the Agent IAM Role
    Value: !GetAtt AgentMasterRole.Arn
    Export:
      Name: !Sub ${AWS::StackName}-AgentRoleArn

