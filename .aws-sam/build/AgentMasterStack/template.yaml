AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Bedrock Agent - AgentMaster
Parameters:
  FoundationModel:
    Type: String
    Default: anthropic.claude-3-sonnet-20240229-v1:0
    Description: Foundation model ID for the Bedrock Agent
    AllowedValues:
    - anthropic.claude-v2
    - anthropic.claude-v2:1
    - anthropic.claude-3-sonnet-20240229-v1:0
    - anthropic.claude-3-haiku-20240307-v1:0
    - anthropic.claude-instant-v1
  AgentInstruction:
    Type: String
    Description: Instructions for the Bedrock Agent (loaded from instruction.txt)
  ToolRollDiceLambdaArn:
    Type: String
    Description: ARN of the ToolRollDice Lambda function
    Default: ''
Resources:
  AgentMasterRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AgentMasterRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: bedrock.amazonaws.com
          Action: sts:AssumeRole
          Condition:
            StringEquals:
              aws:SourceAccount:
                Ref: AWS::AccountId
            ArnLike:
              aws:SourceArn:
                Fn::Sub: arn:aws:bedrock:${AWS::Region}:${AWS::AccountId}:agent/*
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/AmazonBedrockFullAccess
      Policies:
      - PolicyName: BedrockAgentPolicy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - bedrock:InvokeModel
            - bedrock:InvokeModelWithResponseStream
            Resource:
              Fn::Sub: arn:aws:bedrock:${AWS::Region}::foundation-model/*
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource:
              Fn::Sub: arn:aws:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/bedrock/agents/*
          - Effect: Allow
            Action:
            - lambda:InvokeFunction
            Resource:
              Ref: ToolRollDiceLambdaArn
  AgentMaster:
    Type: AWS::Bedrock::Agent
    Properties:
      AgentName: AgentMaster
      AgentResourceRoleArn:
        Fn::GetAtt:
        - AgentMasterRole
        - Arn
      Description: Master AI Agent powered by AWS Bedrock
      FoundationModel:
        Ref: FoundationModel
      Instruction:
        Ref: AgentInstruction
      IdleSessionTTLInSeconds: 1800
      AutoPrepare: true
  GameToolsActionGroup:
    Type: AWS::Bedrock::AgentActionGroup
    Properties:
      ActionGroupName: GameTools
      AgentId:
        Ref: AgentMaster
      AgentVersion: DRAFT
      Description: Action group for game tools like dice rolling
      ActionGroupExecutor:
        Lambda:
          Ref: ToolRollDiceLambdaArn
      ApiSchema:
        Payload: "{\n  \"openapi\": \"3.0.0\",\n  \"info\": {\n    \"title\": \"Game\
          \ Tools API\",\n    \"version\": \"1.0.0\",\n    \"description\": \"API\
          \ for game tools including dice rolling\"\n  },\n  \"paths\": {\n    \"\
          /rollDice\": {\n      \"post\": {\n        \"summary\": \"Roll dice\",\n\
          \        \"description\": \"Roll one or more dice with specified number\
          \ of sides\",\n        \"operationId\": \"rollDice\",\n        \"requestBody\"\
          : {\n          \"required\": true,\n          \"content\": {\n         \
          \   \"application/json\": {\n              \"schema\": {\n             \
          \   \"type\": \"object\",\n                \"properties\": {\n         \
          \         \"sides\": {\n                    \"type\": \"integer\",\n   \
          \                 \"description\": \"Number of sides on each die (e.g.,\
          \ 6 for d6, 20 for d20)\",\n                    \"minimum\": 1\n       \
          \           },\n                  \"count\": {\n                    \"type\"\
          : \"integer\",\n                    \"description\": \"Number of dice to\
          \ roll\",\n                    \"minimum\": 1,\n                    \"default\"\
          : 1\n                  }\n                },\n                \"required\"\
          : [\"sides\"]\n              }\n            }\n          }\n        },\n\
          \        \"responses\": {\n          \"200\": {\n            \"description\"\
          : \"Successful dice roll\",\n            \"content\": {\n              \"\
          application/json\": {\n                \"schema\": {\n                 \
          \ \"type\": \"object\",\n                  \"properties\": {\n         \
          \           \"sides\": {\n                      \"type\": \"integer\",\n\
          \                      \"description\": \"Number of sides on each die\"\n\
          \                    },\n                    \"count\": {\n            \
          \          \"type\": \"integer\",\n                      \"description\"\
          : \"Number of dice rolled\"\n                    },\n                  \
          \  \"results\": {\n                      \"type\": \"array\",\n        \
          \              \"items\": {\n                        \"type\": \"integer\"\
          \n                      },\n                      \"description\": \"Array\
          \ of individual dice roll results\"\n                    },\n          \
          \          \"total\": {\n                      \"type\": \"integer\",\n\
          \                      \"description\": \"Sum of all dice rolls\"\n    \
          \                }\n                  }\n                }\n           \
          \   }\n            }\n          }\n        }\n      }\n    }\n  }\n}\n"
  AgentMasterAlias:
    Type: AWS::Bedrock::AgentAlias
    Properties:
      AgentAliasName: prod
      AgentId:
        Ref: AgentMaster
      Description: Production alias for AgentMaster
Outputs:
  AgentId:
    Description: The ID of the Bedrock Agent
    Value:
      Ref: AgentMaster
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AgentId
  AgentArn:
    Description: The ARN of the Bedrock Agent
    Value:
      Fn::GetAtt:
      - AgentMaster
      - AgentArn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AgentArn
  AgentAliasId:
    Description: The ID of the Agent Alias
    Value:
      Fn::GetAtt:
      - AgentMasterAlias
      - AgentAliasId
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AgentAliasId
  AgentAliasArn:
    Description: The ARN of the Agent Alias
    Value:
      Fn::GetAtt:
      - AgentMasterAlias
      - AgentAliasArn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AgentAliasArn
  AgentRoleArn:
    Description: The ARN of the Agent IAM Role
    Value:
      Fn::GetAtt:
      - AgentMasterRole
      - Arn
    Export:
      Name:
        Fn::Sub: ${AWS::StackName}-AgentRoleArn
